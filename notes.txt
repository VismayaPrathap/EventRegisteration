 <head> = basic info about the html document for the machine(?)
 <a href=""> = here href is a mandatory attribute similiar ti src in <img src="">
 <h1>Hello<h1> = this full line is called as an Element
 HTML = Basic Layout/Content
 CSS = Styling/Designing
 JavaScript = Response/ Interactive Webpage
 block elements = they take up the full width space(h1, p, etc)
 inline elements = they take only their specific width space(a, span, etc)

 Framework:
 contains all basic securities, authentications, sessions,etc.
 They have all the necessary requirements in a bundle, only we need to have the core logic with us, rest all is within with them.
 wsgi= webserver gateway interface



 Steps:
 1. Create a virtual environment using-> python3 -m venv foldername
 2. To activate virtual environment in Windows -> .\foldername\Scripts\activate
 3. Packages in Django -> pip install django
 4. To start a project -> django-admin startproject EventRegProject
 5. To create application -> python manage.py startapp eventapp
 6. In settings.py, go to INSTALLED_APPS, and there add the app like this: 'eventapp', at the end.
 7. In urls.py, add:
 urlpatterns=[
    path('admin/', admin.site.urls),
    path('',include('eventapp.urls')),
 ]
 
 NOW GO TO EVENTAPP FOLDER, and WITHIN IT:
 8. create a urls.py file that contains:
 from django.urls import path
 from . import views
 urlpatterns=[
    path('',views.index, name='index')
 ]

 9. in views.py (also in eventapp):
 from django.shortcuts import render
 from django.http import HttpResponse

 def index(request):
    return HttpResponse("Hai, you've arrived at index")

command to run is: python manage.py runserver

10. In the eventapp folder, create a templates folder
 then within this template folder, create a 'eventapp' folder.

11. put the two html files(index, details) in this folder.
After this, make changes in the views.py file:
    return render(request,'eventapp/index.html')
12. {% load static %} -> jinja format(?) right after the doctype! line in index.html
13. create a 'static' folder, and put the the images and css and js files into it.
14. then in the link href to the css file line......
change to:
<link rel="stylesheets" href="{% static 'style.css' %}">

15. python manage.py runserver
python manage.py migrate
python manage.py createsuperuser

localhost:8000
localhost:8000\admin
localhost:8000\events\

16. In models.py:
class Event(models.Model):
   event_title = models.CharField(max_length=120)
   event_location = models.Charfield(max_length=70)
   date = models.CharField(max_length=10)
   description = models.TextField()

17. python manage.py makemigrations
18. Register to table using:
in admin.py:

from .models import Event

admin.site.register(Event)

19. in views.py:
from .models import Event

in def index:
   event = Event.object.all()
   context ={
      'events' : event
   }
   return render(request, 'eventapp/index.htm', context)

20. In the django admin site, add an event, by inputting the details.
21. for looping:
in the index.html file:

in the section id="events":
   make it:

   <section id="events">
      {% for event in events %}
      <div class=".....">
         <h2>{{event.event_title}}<h2/>
         <p>Location: {{event.event_location}}</p>
         <p>Date: {{event.date}}</p>
         <a></a>
      </div>
      {% endfor %}
      ........
   </section>

Then  just refresh

13th Sept 2023:
1. do again: .\venv\Scripts\activate
2. go to admin page (localhost:8000) in browser
3. in models.py,to change object name to event title, add within the existing class:
def __str__(self):
   return self.event_title

4. in urls.py within the app-folder, create a path:
urlpatterns=[
    path('',views.index, name='index'),
    path('event_details', views.details, name="details"),
 ]

views.details= views.htmlfilename

5. in views.py file add:
def detail(request):
   return render(request,'eventapp/details.html')

6. to render style changes: do the same thing as yesterday->
in details.html file:
do the {% load static %} right below doctype....
and in the href add the same thing as in the ndex.html file.

 in order to get different url each time:
 7. First go to index.html:
 <section id="events">
      {% for event in events %}
      <div class=".....">
         <h2>...<h2/>
         <p>...</p>
         <p></p>
         <a href="{% url 'detail' event.pk %}"></a>
      </div>
      {% endfor %}
      ........
   </section>
8. Then go to urls.py, and change:
 urlpatterns=[
    path('',views.index, name='index'),
    path('event_details/<int:pk>', views.details, name="details"),
 ]

 9. In views.py, change:

def detail(request, pk):
   eve_det = Event.objects.get(pk=pk)
   context = {
      'events': eve_det
   }
   return render(request, 'eventapp/details.html', context) (eventapp==path)

  10. in details.html, change/add:
   <h2>{{events.event_title}}<h2>
   .....
   <p>Date: {{events.date}}</p>
   <p>Location: {{events.location}}</p>
   <p>Description: {{events.decription}}</p>

11. go to models.py, create class:
   class Entrees(models.Model):
      reg_name = models.CharField(max_length=35)
      reg_ mail= models.Emailfield(max_length=20)
      reg_number = models.DcimalField(max_digits=10, decimal_places=None)
      event = models.ForeignKey("Event",on_delete=models.CASCADE)

12. migrate, using 
python manage.py makemigrations
python manage.py migrate

13. 18. Register to table using:
in admin.py, add:

admin.site.register(Entrees)

14. create a file forms.py in eventapp folder:
from django import forms
from .models import Entrees

class Eventform(forms.modelForm):
   class Meta:
      model = Entrees
      fields = ['reg_name', 'reg_ mail', ' reg_number']

15. in views.py:

from .forms import Eventform
def detail(request, pk):
   if request.method= == "post":
      print("got post request from frontend")
   eve_det = Event.objects.get(pk=pk)
   form = Eventform()
   context = {
      'events': eve_det,
      'forms' :  form
   }
   return render(request, 'eventapp/details.html', context) (eventapp=path)

   16. in details.html: 
   <form action="{% url 'detail' event.pk %} method="post">
   {% csrf_token %}
   {{form.as_p}}
   .....delete things within form excluding button...

   </form>

   17. change in views.py:
   def detail(request, pk):
      eve_det = Event.objects.get(pk=pk)
      if request.method == "post":
         form=Eventform(request.POST)
         if form.isvalid():
            entree = form.save(commit=false)
            entree.event = eve_det
            entree.save()
      form = Eventform()
      context = {
         'events': eve_det,
         'forms' :  form
      }
      return render(request, 'eventapp/details.html', context) (eventapp=path)


   Make an account in render.com, for to host the site!!